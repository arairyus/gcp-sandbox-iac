name: Terraform common/sandbox CI
on:
  pull_request:
    branches:
      - main
    paths:
      - "terraform/common/sandbox/**"
      - ".github/workflows/common-terraform*.yaml"
      - "terraform/.terraform-version"

permissions:
  id-token: write
  contents: read
  issues: write
  pull-requests: write

jobs:
  terraform-common-sandbox:
    name: Terraform Plan
    runs-on: ubuntu-latest
    environment:
      name: sandbox
    strategy:
      matrix:
        work_directory: [
            "terraform/common/sandbox/shared-vpc",
            "terraform/common/sandbox/project-factory",
            # "terraform/common/sandbox/oidc",
          ]
    env:
      TF_VAR_project_id: "${{ secrets.COMMON_SANDBOX_PROJECT_ID }}"
      TF_VAR_impersonate_service_account: "${{ secrets.IMPERSONATE_SERVICE_ACCOUNT }}"
      TF_VAR_org_domain: "${{ secrets.ORG_DOMAIN }}"
      TF_VAR_pool_id: "${{ secrets.WIF_POOL_ID }}"
      TF_VAR_provider_id: "${{ secrets.WIF_PROVIDER_ID }}"
      TF_VAR_org_id: "${{ secrets.ORG_ID }}"
      TF_VAR_folder_id: "${{ secrets.SANDBOX_FOLDER_ID }}"
      TF_VAR_billing_account_id: "${{ secrets.BILLING_ACCOUNT_ID }}"
      TF_VAR_tfstate_bucket: "${{ secrets.TFSTATE_STORAGE }}"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get Terraform version
        run: |
          echo "TERRAFORM_VERSION=$(cat ./terraform/.terraform-version)" >> $GITHUB_ENV
      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "${{ env.TERRAFORM_VERSION }}"
      - uses: "google-github-actions/auth@v2"
        with:
          project_id: "${{ secrets.COMMON_SANDBOX_PROJECT_ID }}"
          workload_identity_provider: "${{ secrets.WIF_PROVIDER }}"
          # service_account: "${{ secrets.IMPERSONATE_SERVICE_ACCOUNT }}"
      - name: Create tfbackend
        run: |
          echo "bucket = \"${{ secrets.TFSTATE_STORAGE }}\"" >> default.tfbackend
          echo "impersonate_service_account = \"${{ secrets.IMPERSONATE_SERVICE_ACCOUNT }}\"" >> default.tfbackend
          cat default.tfbackend
        working-directory: ${{ matrix.work_directory }}
      - name: Terraform Init
        run: terraform init -backend-config=default.tfbackend
        working-directory: ${{ matrix.work_directory }}
      - name: Terraform Plan
        id: tf_plan
        run: |
          terraform plan -compact-warnings -detailed-exitcode -lock=false -no-color -out tf.tfplan
        working-directory: ${{ matrix.work_directory }}
        continue-on-error: true
      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v2"
        with:
          version: ">= 363.0.0"

      - name: "Use gcloud CLI"
        run: gcloud organizations get-iam-policy "${{ secrets.ORG_ID }}"
      - name: Create Terraform plan output
        id: tfplan_output
        run: |
          ERROR_MSG=""
          if [[ ${{ steps.tf_plan.outputs.exitcode }} == 0 ]]; then
            TITLE="## :white_check_mark: Terraform Plan succeeded"
            TERRAFORM_PLAN=$(terraform show -no-color tf.tfplan)
          elif [[ ${{ steps.tf_plan.outputs.exitcode }} == 1 ]]; then
            TITLE="## :x: Terraform Plan failed"
            TERRAFORM_PLAN="Terraform Plan Failed!"
            ERROR_MSG="Please check the [Terraform Plan](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          else
            TITLE="## :warning: Terraform Plan succeeded(change detected)"
            TERRAFORM_PLAN=$(terraform show -no-color tf.tfplan)
          fi
          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "$TITLE" >> $GITHUB_OUTPUT
          echo "work_directory: \`${{ matrix.work_directory }}\`" >> $GITHUB_OUTPUT
          echo $ERROR_MSG >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT
        working-directory: ${{ matrix.work_directory }}
      - name: Create summary
        id: create_summary
        env:
          SUMMARY: ${{ steps.tfplan_output.outputs.summary }}
        run: |
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
      - name: Comment on PR
        if: github.event.action != 'closed'
        uses: actions/github-script@v7
        env:
          output_summary: ${{ steps.tfplan_output.outputs.summary }}
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: process.env.output_summary
            })
